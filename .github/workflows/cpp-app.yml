name: Test C++ assemblers

on:
  # Trigger tests on push
  push:
    branches:
      - "**"
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 1 * * *"
jobs:
  build:
    if: "!(contains(github.event.head_commit.message, '[ci skip]') || contains(github.event.head_commit.message, '[skip ci]'))"
    runs-on: ubuntu-20.04
    container: dolfinx/dev-env:nightly
    strategy:
      matrix:
        petsc_mode: [real, complex]
        petsc_int_type: [32, 64]
        CXX: [c++, clang++]
        CC: [cc, clang]
        exclude:
          - CC: cc
            CXX: clang++
          - CC: clang
            CXX: c++

    env:
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      HDF5_MPI: "ON"
      HDF5_DIR: "/usr/lib/x86_64-linux-gnu/hdf5/mpich/"
      PETSC_ARCH: linux-gnu-${{ matrix.petsc_mode }}-${{ matrix.petsc_int_type }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      CXX_FLAGS: "-Wall -Werror -g -pedantic -Ofast -march=native"
    steps:
      - uses: actions/checkout@v2

      - name: Get Basix and install
        uses: actions/checkout@v2
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: main

      - name: Install FEniCS Python components (dolfinx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-basix -S ./basix/cpp
          cmake --build build-basix
          cmake --install build-basix
          python3 -m pip install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git@main
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git@main
      - name: Install dolfinx
        uses: actions/checkout@v2
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: main
      - name: Configure and install C++ (dolfinx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build-dolfinx -S ./dolfinx/cpp/
          cmake --build build-dolfinx
          cmake --install build-dolfinx

      - name: Build Python interface (dolfinx)
        run: python3 -m pip -v install ./dolfinx/python/

      - name: Install boost programming options
        run: |
          apt-get update
          apt-get install -y libboost-program-options-dev

      - name: Install and run custom assemblers (C++)
        run: |
          cmake -G Ninja -B build-dir -DCMAKE_BUILD_TYPE=Developer cpp/
          ninja -C build-dir install
          cd cpp/demo/volume
          cmake -G Ninja -B build-dir -DCMAKE_BUILD_TYPE=Developer .
          ninja -C build-dir
          ./build-dir/volume
          cd ../surface
          cmake -G Ninja -B build-dir -DCMAKE_BUILD_TYPE=Developer .
          ninja -C build-dir
          ./build-dir/custom-assembler
